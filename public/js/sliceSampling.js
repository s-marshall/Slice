// Generated by CoffeeScript 1.4.0
var SliceSampler, f, murdererPDF, murderers, o, randomSign, sampleEvent, sampleOneD, t, weaponPDF, weaponPDFA, weaponPDFB;

SliceSampler = (function() {

  function SliceSampler(options) {
    this.P_function = options["function"];
    this.x_value = 0.0;
    this.w_length = options.step_length;
    this.left_boundary = 0.0;
    this.right_boundary = 0.0;
  }

  SliceSampler.prototype.draw = function(minimum_value, maximum_value) {
    var random_value;
    return random_value = minimum_value + Math.random() * (maximum_value - minimum_value);
  };

  SliceSampler.prototype.step_out = function(u_value) {
    var r_multiplier, _results;
    r_multiplier = Math.random();
    this.left_boundary = this.x_value - r_multiplier * this.w_length;
    this.right_boundary = this.x_value + (1.0 - r_multiplier) * this.w_length;
    while (this.P_function(this.left_boundary) > this.u_value) {
      this.left_boundary = this.left_boundary - this.w_length;
    }
    _results = [];
    while (this.P_function(this.right_boundary) > this.u_value) {
      _results.push(this.right_boundary = this.right_boundary + this.w_length);
    }
    return _results;
  };

  SliceSampler.prototype.shrink = function(x_prime) {
    if (x_prime > this.x_value) {
      return this.right_boundary = x_prime;
    } else {
      return this.left_boundary = x_prime;
    }
  };

  SliceSampler.prototype.sample = function(x_value) {
    var u_prime, x_prime;
    this.x_value = x_value;
    u_prime = Math.random() * this.P_function(this.x_value);
    this.step_out(u_prime);
    while (true) {
      x_prime = this.draw(this.left_boundary, this.right_boundary);
      if (this.P_function(x_prime) > u_prime) {
        break;
      }
      this.shrink(x_prime);
    }
    return [x_prime, u_prime];
  };

  return SliceSampler;

})();

randomSign = function() {
  if (Math.random() > 0.5) {
    return 1.0;
  }
  return -1.0;
};

f = function(x) {
  return Math.exp(-1.0 * Math.pow(x, 2.0) / 2.0) * (1.0 + Math.pow(Math.sin(3.0 * x), 2.0)) * (1.0 + Math.pow(Math.cos(5.0 * x), 2.0));
};

o = new Processing(document.getElementById('screen_OneD'));

sampleOneD = new SliceSampler({
  "function": f,
  step_length: 1.0
});

o.setup = function() {
  o.size(300, 300);
  o.background(255, 225, 0);
  o.fill(255, 255, 255);
  return o.noLoop();
};

o.draw = function() {
  var burnin, count, expectation, i, point, sample_expectation, sample_point, x, y, _i, _j;
  burnin = 5000;
  point = 5.0 * Math.random() * randomSign();
  for (i = _i = 1; 1 <= burnin ? _i <= burnin : _i >= burnin; i = 1 <= burnin ? ++_i : --_i) {
    sample_point = sampleOneD.sample(point);
    point = sample_point[0];
  }
  count = 10000;
  expectation = 0.0;
  sample_expectation = 0.0;
  for (i = _j = 0; 0 <= count ? _j <= count : _j >= count; i = 0 <= count ? ++_j : --_j) {
    sample_point = sampleOneD.sample(point);
    point = sample_point[0];
    sample_expectation += sample_point[0];
    expectation += sample_point[0] * f(sample_point[0]);
    y = 300.0 - (sample_point[1] * 70.0);
    x = sample_point[0] * 50.0 + 150.0;
    o.set(x, y, o.color(255, 0, 0));
    x = 3.0 * Math.random() * randomSign();
    y = f(x);
    x = x * 50.0 + 150.0;
    y = 300.0 - (y * 70.0);
    o.set(x, y, o.color(0, 0, 0));
  }
  return o.updatePixels();
};

o.setup();

o.draw();

murderers = ['Alice', 'Bob'];

murdererPDF = function(x) {
  if ((0.0 <= x && x <= 1.0)) {
    return 0.3;
  }
  if ((1.0 < x && x <= 2.0)) {
    return 0.7;
  }
  return 0.0;
};

sampleEvent = function(p, events, probabilities) {
  var index, x, _i, _len;
  for (index = _i = 0, _len = probabilities.length; _i < _len; index = ++_i) {
    x = probabilities[index];
    if (p === x) {
      return events[index];
    }
  }
  return null;
};

weaponPDF = function(x, murderer) {
  switch (murderer) {
    case 'Alice':
      if ((0.0 <= x && x <= 1.0)) {
        return 0.03;
      }
      if ((1.0 < x && x <= 2.0)) {
        return 0.97;
      }
      return 0.0;
    case 'Bob':
      if ((0.0 <= x && x <= 1.0)) {
        return 0.2;
      }
      if ((1.0 < x && x <= 2.0)) {
        return 0.8;
      }
      return 0.0;
  }
};

weaponPDFA = function(x) {
  return weaponPDF(x, 'Alice');
};

weaponPDFB = function(x) {
  return weaponPDF(x, 'Bob');
};

t = new Processing(document.getElementById('Who dunnit?'));

t.setup = function() {
  t.size(300, 300);
  t.background(140, 140, 140);
  t.stroke(0);
  return t.noLoop();
};

t.draw = function() {
  var AG, AP, BG, BP, burnin, color, conditionals, count, i, results, sampleWeaponA, sampleWeaponB, sampleWho, sample_point, state, weapon, who, _i;
  t.loadPixels();
  sampleWho = new SliceSampler({
    "function": murdererPDF,
    step_length: 1.0
  });
  sampleWeaponA = new SliceSampler({
    "function": weaponPDFA,
    step_length: 1.0
  });
  sampleWeaponB = new SliceSampler({
    "function": weaponPDFB,
    step_length: 1.0
  });
  state = {
    x: Math.random(),
    y: Math.random()
  };
  count = 50000;
  sample_point = [];
  AG = 0.0;
  AP = 0.0;
  BG = 0.0;
  BP = 0.0;
  color = t.color(255, 255, 255);
  results = [];
  burnin = 5000;
  for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
    sample_point = sampleWho.sample(state.x);
    state.x = sample_point[0];
    who = sampleEvent(murdererPDF(state.x), ['Alice', 'Bob'], [0.3, 0.7]);
    weapon = '';
    if (who === 'Alice') {
      sample_point = sampleWeaponA.sample(state.y);
      state.y = sample_point[0];
      weapon = sampleEvent(weaponPDFA(state.y), ['gun', 'pipe'], [0.03, 0.97]);
    } else {
      sample_point = sampleWeaponB.sample(state.y);
      state.y = sample_point[0];
      weapon = sampleEvent(weaponPDFB(state.y), ['pipe', 'gun'], [0.2, 0.8]);
    }
    if ((who === 'Alice') && (weapon === 'gun')) {
      AG += 1.0;
      color = t.color(255, 0, 0);
      if (i > burnin) {
        results.push(['Alice', 'gun']);
      }
    }
    if ((who === 'Alice') && (weapon === 'pipe')) {
      AP += 1.0;
      color = t.color(0, 255, 0);
      if (i > burnin) {
        results.push(['Alice', 'pipe']);
      }
    }
    if ((who === 'Bob') && (weapon === 'gun')) {
      BG += 1.0;
      color = t.color(0, 0, 255);
      if (i > burnin) {
        results.push(['Bob', 'gun']);
      }
    }
    if ((who === 'Bob') && (weapon === 'pipe')) {
      BP += 1.0;
      color = t.color(255, 255, 0);
      if (i > burnin) {
        results.push(['Bob', 'pipe']);
      }
    }
    t.set(Math.floor(state.x * 150.0), Math.floor(state.y * 150.0), color);
  }
  t.updatePixels();
  conditionals = "<br>The probability of Alice being the murderer if a pipe was found at the scene: " + Math.floor(AP / (AP + BP) * 100.0) + '% (answer to query)';
  conditionals += "<br>The probability of Bob being the murderer if a gun was found at the scene: " + Math.floor(BG / (AG + BG) * 100.0) + '%';
  return document.getElementById('results').innerHTML = conditionals;
};

t.setup();

t.draw();
